{
    parserClass="org.serenityos.jakt.parser.JaktParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Jakt"
    psiImplClassSuffix="Impl"
    psiPackage="org.serenityos.jakt.psi.api"
    psiImplPackage="org.serenityos.jakt.psi.impl"

    elementTypeHolderClass="org.serenityos.jakt.JaktTypes"
    elementTypeClass="org.serenityos.jakt.syntax.JaktElementType"
    tokenTypeClass="org.serenityos.jakt.syntax.JaktToken"

    parserUtilClass="org.serenityos.jakt.syntax.JaktParserUtil"

    tokens=[
        DOC_COMMENT="regexp:(///[^\r\n]*)+"
        COMMENT="regexp:(//[^\r\n]*)+"
    ]

    implements(".*")="org.serenityos.jakt.psi.JaktPsiElement"

    extends(".+BinaryExpression")=BinaryExpression
    extends(".+Expression")=Expression
    extends(".+Statement")=Statement

    name(".+Expression")="expression"
    name(".+Statement")="statement"

    generateTokenAccessors=true
}

/*************************************
 *               ROOT                *
 *************************************/

File ::= NL TopLevelDefinitionList? NL

private TopLevelDefinitionList ::= TopLevelDefinition (StatementSeparator TopLevelDefinition)*

TopLevelDefinition ::=
      Function
    | StructDeclaration
    | EnumDeclaration
    | NamespaceDeclaration
    | ImportExternStatement
    | ImportStatement {
    implements="org.serenityos.jakt.psi.named.JaktNameIdentifierOwner"
    // For some reason this gets a getExternKeyword() function which conflicts
    // with ExternStructDeclaration
    generateTokenAccessors=false
}

private StatementLead ::=
      EXTERN_KEYWORD
    | CLASS_KEYWORD
    | STRUCT_KEYWORD
    | FUNCTION_KEYWORD
    | LET_KEYWORD
    | MUT_KEYWORD
    | WHILE_KEYWORD
    | FOR_KEYWORD
    | LOOP_KEYWORD
    | RETURN_KEYWORD
    | THROW_KEYWORD
    | DEFER_KEYWORD
    | THROWS_KEYWORD
    | SEMICOLON
    | ExpressionLead

private ExpressionLead ::=
      IF_KEYWORD
    | TRUE_KEYWORD
    | FALSE_KEYWORD
    | PAREN_OPEN
    | PAREN_CLOSE
    | CURLY_OPEN
    | CURLY_CLOSE
    | BRACKET_OPEN
    | BRACKET_CLOSE
    | PLUS
    | MINUS
    | EXCLAMATION_POINT
    | STRING_LITERAL
    | CHAR_LITERAL
    | IDENTIFIER
    | Literal

NamespaceDeclaration ::= NAMESPACE_KEYWORD IDENTIFIER NamespaceBody {
    extends=TopLevelDefinition
    implements=[
        "org.serenityos.jakt.psi.JaktScope"
        "org.serenityos.jakt.psi.declaration.JaktDeclaration"
    ]
    mixin="org.serenityos.jakt.psi.declaration.JaktNamespacedDeclarationMixin"
}

NamespaceBody ::= CURLY_OPEN NL TopLevelDefinitionList? NL CURLY_CLOSE

// Import Statement
ImportStatement ::= IMPORT_KEYWORD !EXTERN_KEYWORD IDENTIFIER ImportAs? ImportBraceList? {
    extends=TopLevelDefinition
    implements="org.serenityos.jakt.psi.declaration.JaktDeclaration"
    mixin="org.serenityos.jakt.psi.declaration.JaktImportStatementMixin"
}
private ImportAs ::= KEYWORD_AS IDENTIFIER
ImportBraceList ::= CURLY_OPEN NL <<commaOrEolList ImportBraceEntry>>? NL CURLY_CLOSE
ImportBraceEntry ::= IDENTIFIER {
    implements="org.serenityos.jakt.psi.declaration.JaktDeclaration"
    mixin="org.serenityos.jakt.psi.declaration.JaktImportBraceEntryMixin"
}

ImportExternStatement ::= IMPORT_KEYWORD EXTERN_KEYWORD CSpecifier? STRING_LITERAL ImportExternBody {
    extends=TopLevelDefinition
    implements="org.serenityos.jakt.psi.JaktScope"
    mixin="org.serenityos.jakt.psi.declaration.JaktImportExternStatementMixin"
}

CSpecifier ::= 'c' | 'C'

private ImportExternBody ::= CURLY_OPEN NL <<commaOrEolList ImportExternDeclaration>>? NL CURLY_CLOSE
private ImportExternDeclaration ::= Function | StructDeclaration | NamespaceDeclaration

/***************************
 *       FUNCTIONS         *
 ***************************/

Function ::= FunctionHeader FunctionBody? {
    extends=TopLevelDefinition
    implements=[
        "org.serenityos.jakt.psi.declaration.JaktDeclaration"
        "org.serenityos.jakt.psi.JaktScope"
        "org.serenityos.jakt.psi.caching.JaktModificationBoundary"
        "org.serenityos.jakt.psi.declaration.JaktGeneric"
    ]
    mixin="org.serenityos.jakt.psi.declaration.JaktFunctionMixin"
}

private FunctionHeader ::= EXTERN_KEYWORD? (COMPTIME_KEYWORD | FUNCTION_KEYWORD)
    IDENTIFIER? GenericBounds? ParameterList FunctionReturnType

FunctionReturnType ::= THROWS_KEYWORD? [ARROW Type]
private FunctionBody ::= Block | FAT_ARROW NL Expression

ParameterList ::= PAREN_OPEN NL [(ThisParameter | Parameter) (MemberSeparator? Parameter)*] MemberSeparator? NL PAREN_CLOSE
ThisParameter ::= MUT_KEYWORD? THIS_KEYWORD
Parameter ::= ANON_KEYWORD? MUT_KEYWORD? IDENTIFIER TypeAnnotation [EQUALS Expression] {
    implements="org.serenityos.jakt.psi.declaration.JaktDeclaration"
    mixin="org.serenityos.jakt.psi.declaration.JaktParameterMixin"
}

/*************************
 *       STRUCTS         *
 *************************/

StructDeclaration ::= StructHeader StructBody {
    extends=TopLevelDefinition
    implements=[
        "org.serenityos.jakt.psi.JaktScope"
        "org.serenityos.jakt.psi.declaration.JaktDeclaration"
        "org.serenityos.jakt.psi.declaration.JaktGeneric"
    ]
    mixin="org.serenityos.jakt.psi.declaration.JaktStructDeclarationMixin"
}

private StructHeader ::= EXTERN_KEYWORD? (CLASS_KEYWORD | STRUCT_KEYWORD) IDENTIFIER GenericBounds? NL

StructBody ::= CURLY_OPEN NL <<commaOrEolList StructMember>>? NL CURLY_CLOSE
StructMember ::= StructField | StructMethod

StructField ::= StructVisibility? IDENTIFIER TypeAnnotation {
    implements="org.serenityos.jakt.psi.declaration.JaktDeclaration"
    mixin="org.serenityos.jakt.psi.declaration.JaktStructFieldMixin"
}

StructMethod ::= StructVisibility? Function

StructVisibility ::= PUBLIC_KEYWORD | PRIVATE_KEYWORD |  RestrictedVisibility
private RestrictedVisibility ::= RESTRICTED_KEYWORD PAREN_OPEN <<commaOrEolList Type>>? PAREN_CLOSE
MemberSeparator ::= COMMA? NEWLINE+ | COMMA {name="comma or newline"}

/*******************
 *      Enums      *
 *******************/

EnumDeclaration ::= EnumHead EnumBody {
    extends=TopLevelDefinition
    implements=[
        "org.serenityos.jakt.psi.JaktScope"
        "org.serenityos.jakt.psi.declaration.JaktDeclaration"
        "org.serenityos.jakt.psi.declaration.JaktGeneric"
    ]
    mixin="org.serenityos.jakt.psi.declaration.JaktEnumDeclarationMixin"
}
private EnumHead ::= BOXED_KEYWORD? ENUM_KEYWORD NL IDENTIFIER NL
private EnumBody ::= UnderlyingTypeEnumBody | NormalEnumBody

UnderlyingTypeEnumBody ::= TypeAnnotation NL CURLY_OPEN NL UnderlyingTypeEnumMembers CURLY_CLOSE

fake EnumVariant ::= IDENTIFIER [(EQUALS Expression) | NormalEnumMemberBody] {
    name="enum variant"
    implements="org.serenityos.jakt.psi.declaration.JaktDeclaration"
    mixin="org.serenityos.jakt.psi.declaration.JaktEnumVariantMixin"
}

private UnderlyingTypeEnumMembers ::= <<commaOrEolList UnderlyingTypeEnumVariant>>?
UnderlyingTypeEnumVariant ::= IDENTIFIER [EQUALS Expression] {elementType=EnumVariant}

NormalEnumBody ::= GenericBounds? NL CURLY_OPEN NL <<commaOrEolList NormalEnumMember>>? CURLY_CLOSE
NormalEnumMember ::= NormalEnumVariant | (StructVisibility? Function)
NormalEnumVariant ::= IDENTIFIER NormalEnumMemberBody? {elementType=EnumVariant}
NormalEnumMemberBody ::= PAREN_OPEN NL [TypeEnumMemberBody | StructEnumMemberBody] PAREN_CLOSE
TypeEnumMemberBody ::= <<commaList (Type !COLON)>>
private StructEnumMemberBody ::= <<commaOrEolList StructEnumMemberBodyPart>>
StructEnumMemberBodyPart ::= StructEnumMemberLabel TypeAnnotation
StructEnumMemberLabel ::= IDENTIFIER {
    implements="org.serenityos.jakt.psi.declaration.JaktDeclaration"
    mixin="org.serenityos.jakt.psi.declaration.JaktStructEnumMemberLabelMixin"
}

/*************************************
 *            STATEMENTS             *
 *************************************/

private StatementList ::= Statement (StatementSeparator Statement)*
private StatementSeparator ::= (NEWLINE | SEMICOLON)+

Statement ::=
      Expression
    | ReturnStatement
    | ThrowStatement
    | DeferStatement
    | IfStatement
    | WhileStatement
    | LoopStatement
    | ForStatement
    | VariableDeclarationStatement
    | GuardStatement
    | YieldStatement
    | BreakStatement
    | ContinueStatement
    | UnsafeStatement
    | InlineCppStatement
    | Block
    { name='statement' }

VariableDeclarationStatement ::= (LET_KEYWORD | MUT_KEYWORD) VariableDeclLhs EQUALS Expression {
    implements="org.serenityos.jakt.psi.JaktScope"
    mixin="org.serenityos.jakt.psi.declaration.JaktVariableDeclarationStatementMixin"
}

private VariableDeclLhs ::= VariableDecl TypeAnnotation? | (PAREN_OPEN <<commaOrEolList VariableDecl>>? PAREN_CLOSE)

VariableDecl ::= IDENTIFIER {
    implements="org.serenityos.jakt.psi.declaration.JaktDeclaration"
    mixin="org.serenityos.jakt.psi.declaration.JaktVariableDeclMixin"
}

IfStatement ::= IF_KEYWORD Expression Block [NL ELSE_KEYWORD (IfStatement | Block)]
ReturnStatement ::= RETURN_KEYWORD Expression?
ThrowStatement ::= THROW_KEYWORD Expression
DeferStatement ::= DEFER_KEYWORD Statement
WhileStatement ::= WHILE_KEYWORD Expression Block
LoopStatement ::= LOOP_KEYWORD Block

CatchDecl ::= IDENTIFIER {
    implements="org.serenityos.jakt.psi.declaration.JaktDeclaration"
    mixin="org.serenityos.jakt.psi.declaration.JaktCatchDeclMixin"
}

GuardStatement ::= GUARD_KEYWORD Expression ELSE_KEYWORD Block

BreakStatement ::= BREAK_KEYWORD
ContinueStatement ::= CONTINUE_KEYWORD
YieldStatement ::= YIELD_KEYWORD Expression

ForStatement ::= FOR_KEYWORD ForDecl IN_KEYWORD Expression Block {
    implements="org.serenityos.jakt.psi.JaktScope"
    mixin="org.serenityos.jakt.psi.declaration.JaktForStatementMixin"
}
ForDecl ::= IDENTIFIER {
    implements="org.serenityos.jakt.psi.declaration.JaktDeclaration"
    mixin="org.serenityos.jakt.psi.declaration.JaktForDeclMixin"
}

UnsafeStatement ::= UNSAFE_KEYWORD Block
InlineCppStatement ::= CPP_KEYWORD Block

Block ::= NL CURLY_OPEN NLSEMI StatementList? NLSEMI CURLY_CLOSE {
    extends=Statement
}

/*************************************
 *               TYPES               *
 *************************************/

private BaseType ::=
      DictionaryType
    | ArrayType
    | SetType
    | TupleType
    | NeverType
    | VoidType
    | PlainType
    | FunctionType

GenericSpecialization ::= LESS_THAN <<commaOrEolList Type>> GREATER_THAN {extends=Type}
ArrayType ::= BRACKET_OPEN Type BRACKET_CLOSE {extends=Type}
DictionaryType ::= BRACKET_OPEN Type COLON Type BRACKET_CLOSE {pin=3 extends=Type}
SetType ::= CURLY_OPEN Type CURLY_CLOSE {pin=1 extends=Type}
TupleType ::= PAREN_OPEN <<commaList Type>> PAREN_CLOSE {pin=1 extends=Type}
NeverType ::= NEVER_KEYWORD { extends=Type }
VoidType ::= VOID_KEYWORD { extends=Type }
FunctionType ::= FUNCTION_KEYWORD ParameterList FunctionReturnType {pin=1 extends=Type}

PlainType ::= PlainQualifierImpl GenericSpecialization? {
    extends=Type
    implements="org.serenityos.jakt.psi.named.JaktNameIdentifierOwner"
    mixin="org.serenityos.jakt.psi.reference.JaktPlainTypeMixin"
}

Type ::=
      RawType
    | WeakType
    | OptionalType
    | ReferenceType
    | BaseType
{
    implements="org.serenityos.jakt.psi.JaktTypeable"
    mixin="org.serenityos.jakt.psi.misc.JaktTypeMixin"
}

RawType ::= RAW_KEYWORD BaseType {pin=1 extends=Type}
WeakType ::= WEAK_KEYWORD BaseType QUESTION_MARK {pin=1 extends=Type}
OptionalType ::= BaseType QUESTION_MARK {extends=Type}
ReferenceType ::= AMPERSAND MUT_KEYWORD? BaseType {pin=1 extends=Type}

TypeAnnotation ::= COLON Type {extends=Type}
GenericBounds ::= LESS_THAN <<commaOrEolList GenericBound>> GREATER_THAN
GenericBound ::= IDENTIFIER {
    implements="org.serenityos.jakt.psi.declaration.JaktDeclaration"
    mixin="org.serenityos.jakt.psi.declaration.JaktGenericBoundMixin"
}

/*************************************
 *            EXPRESSIONS            *
 *************************************/

// TODO: Pretty much every expression can start with an arbitrary amount of newlines
Expression ::=
      MatchExpression
    | TryExpression
    | LambdaExpression
    | AssignmentBinaryExpression
    | ThisExpression
    | FieldAccessExpression
    | RangeExpression
    | LogicalOrBinaryExpression
    | LogicalAndBinaryExpression
    | BitwiseOrBinaryExpression
    | BitwiseXorBinaryExpression
    | BitwiseAndBinaryExpression
    | RelationalBinaryExpression
    | ShiftBinaryExpression
    | AddBinaryExpression
    | MultiplyBinaryExpression
    | CastExpression
    | IsExpression
    | PrefixUnaryExpression
    | PostfixUnaryExpression
    | Literal
    | AccessExpression
    | IndexedAccessExpression
    | PlainQualifierExpression
    | CallExpression
    | ArrayExpression
    | DictionaryExpression
    | SetExpression
    | TupleOrParenExpression
    { name='expression' }

fake ParenExpression ::= PAREN_OPEN Expression PAREN_CLOSE { pin=1 }
fake TupleExpression ::= PAREN_OPEN Expression+ PAREN_CLOSE

TupleOrParenExpression ::= PAREN_OPEN Expression (TupleExpressionUpper | PAREN_CLOSE) {
    pin=1
    elementType=ParenExpression
}
upper TupleExpressionUpper ::= COMMA <<commaOrEolList Expression>>? PAREN_CLOSE {
    elementType=TupleExpression
}

CallExpression ::= Expression ArgumentList
ArgumentList ::= PAREN_OPEN NL [<<separatedList Argument>>] PAREN_CLOSE
Argument ::= [IDENTIFIER COLON NL] Expression {
    implements="org.serenityos.jakt.psi.named.JaktNameIdentifierOwner"
    mixin="org.serenityos.jakt.psi.reference.JaktArgumentMixin"
}

AccessExpression ::= Expression (DOT | DOT_QUESTION_MARK) Access {
    implements=[
        "org.serenityos.jakt.psi.JaktTypeable"
        "org.serenityos.jakt.psi.named.JaktNameIdentifierOwner"
    ]
    mixin="org.serenityos.jakt.psi.reference.JaktAccessExpressionMixin"
}
private Access ::= () (IDENTIFIER | DECIMAL_LITERAL) {
    name="identifier or tuple index"
    pin=1
}

FieldAccessExpression ::= ThisExpression? DOT IDENTIFIER {
    implements="org.serenityos.jakt.psi.named.JaktNameIdentifierOwner"
    mixin="org.serenityos.jakt.psi.reference.JaktFieldAccessExpressionMixin"
}
ThisExpression ::= THIS_KEYWORD {
    mixin="org.serenityos.jakt.psi.reference.JaktThisExpressionMixin"
}

IndexedAccessExpression ::= Expression IndexedAccess
// Do not inline
private IndexedAccess ::= BRACKET_OPEN Expression BRACKET_CLOSE

RangeExpression ::= Expression DOT_DOT Expression

ArrayExpression ::= BRACKET_OPEN NL [SizedArrayBody | ElementsArrayBody] NL BRACKET_CLOSE
SizedArrayBody ::= Expression SEMICOLON NumericLiteral
ElementsArrayBody ::= <<commaOrEolList Expression>>

DictionaryExpression ::= BRACKET_OPEN NL [<<commaOrEolList DictionaryElement>> | COLON] NL BRACKET_CLOSE
DictionaryElement ::= Expression COLON NL Expression
SetExpression ::= CURLY_OPEN NL <<commaOrEolList Expression>>? NL CURLY_CLOSE

MatchExpression ::= MATCH_KEYWORD Expression MatchBody
MatchBody ::= NL CURLY_OPEN NL (MatchCase NL)* CURLY_CLOSE
MatchCase ::= MatchCaseHead MatchCaseTrail {
    implements="org.serenityos.jakt.psi.JaktScope"
    mixin="org.serenityos.jakt.psi.declaration.JaktMatchCaseMixin"
}
MatchCaseTrail ::= NL FAT_ARROW (Block | Expression) COMMA?
MatchCaseHead ::= <<pipeList (ELSE_KEYWORD | MatchPattern | Expression)>>

MatchPattern ::= PlainQualifierExpression [PAREN_OPEN <<commaOrEolList DestructuringPart>>? PAREN_CLOSE]
DestructuringPart ::= [DestructuringLabel COLON] DestructuringBinding
DestructuringLabel ::= IDENTIFIER {
    implements="org.serenityos.jakt.psi.named.JaktNameIdentifierOwner"
    mixin="org.serenityos.jakt.psi.reference.JaktDestructuringLabelMixin"
}
DestructuringBinding ::= IDENTIFIER {
    implements="org.serenityos.jakt.psi.declaration.JaktDeclaration"
    mixin="org.serenityos.jakt.psi.declaration.JaktDestructuringBindingMixin"
}

TryExpression ::= TRY_KEYWORD (Expression | Block) [CATCH_KEYWORD CatchDecl? Block] {
    implements=[
        "org.serenityos.jakt.psi.JaktTypeable"
        "org.serenityos.jakt.psi.JaktScope"
    ]
    mixin="org.serenityos.jakt.psi.declaration.JaktTryExpressionMixin"
}

fake PlainQualifier ::= (PlainQualifier COLON_COLON)? IDENTIFIER GenericSpecialization? {
    implements=[
        "org.serenityos.jakt.psi.JaktTypeable"
        "org.serenityos.jakt.psi.named.JaktNameIdentifierOwner"
    ]
    mixin="org.serenityos.jakt.psi.reference.JaktPlainQualifierMixin"
}

// TODO: Restrict specialization to only call expressions
PlainQualifierExpression ::= PlainQualifierImpl <<parsePathGenerics GenericSpecialization>>?

private PlainQualifierImpl ::= PlainQualifierStart PlainQualifierSegment*

PlainQualifierStart ::= IDENTIFIER {elementType=PlainQualifier}
left PlainQualifierSegment ::= COLON_COLON IDENTIFIER {
    pin=1
    elementType=PlainQualifier
}

LambdaExpression ::= LambdaFunction
LambdaFunction ::= LambdaHeader FunctionBody {elementType=Function}
private LambdaHeader ::= FUNCTION_KEYWORD LambdaCaptures? ParameterList FunctionReturnType
LambdaCaptures ::= BRACKET_OPEN <<commaOrEolList LambdaCapture>> BRACKET_CLOSE
LambdaCapture ::= [AMPERSAND MUT_KEYWORD?] PlainQualifierExpression

/*************************************
 *        BINARY EXPRESSIONS         *
 *************************************/

fake BinaryExpression ::= Expression+ {
    methods=[left="Expression[0]" right="Expression[1]"]
}

LogicalOrBinaryExpression ::= Expression LogicalOrOp NL Expression
LogicalAndBinaryExpression ::= Expression KEYWORD_AND NL Expression
// &ExpressionLead helps disambiguate rules in PatternHead production
BitwiseOrBinaryExpression ::= Expression PIPE NL &ExpressionLead Expression
BitwiseXorBinaryExpression ::= Expression CARET NL Expression
BitwiseAndBinaryExpression ::= Expression AMPERSAND NL Expression
RelationalBinaryExpression ::= Expression RelationalOp NL Expression
ShiftBinaryExpression ::= Expression ShiftOp NL Expression
AddBinaryExpression ::= Expression AddOp NL Expression
MultiplyBinaryExpression ::= Expression MultiplyOp NL Expression
// TODO: Restrict LHS?
// TODO: Invert Expression{WithoutAssignment} => Expression{WithAssignment}, as this can't be a part
//       of the expression tree root
AssignmentBinaryExpression ::= Expression AssignmentOp NL Expression {rightAssociative=true}

fake UnaryExpression ::= PrefixOp? NL Expression PostfixOp?
PrefixUnaryExpression ::= PrefixOp NL Expression {elementType=UnaryExpression}
PostfixUnaryExpression ::= Expression PostfixOp {elementType=UnaryExpression}

CastExpression ::= Expression KEYWORD_AS (QUESTION_MARK | EXCLAMATION_POINT) Type
IsExpression ::= Expression KEYWORD_IS MatchPattern

private AddOp ::= PLUS | MINUS
private MultiplyOp ::= ASTERISK | SLASH | PERCENT
private ShiftOp ::= ARITH_LEFT_SHIFT | LEFT_SHIFT | ARITH_RIGHT_SHIFT | RIGHT_SHIFT
private RelationalOp ::= LESS_THAN_EQUALS | LESS_THAN | GREATER_THAN_EQUALS | GREATER_THAN | DOUBLE_EQUALS | NOT_EQUALS
private LogicalOrOp ::= KEYWORD_OR | DOUBLE_QUESTION_MARK
private AssignmentOp ::=
      PLUS_EQUALS
    | MINUS_EQUALS
    | ASTERISK_EQUALS
    | SLASH_EQUALS
    | PERCENT_EQUALS
    | ARITH_LEFT_SHIFT_EQUALS
    | LEFT_SHIFT_EQUALS
    | ARITH_RIGHT_SHIFT_EQUALS
    | RIGHT_SHIFT_EQUALS
    | EQUALS
private PrefixOp ::=
      PLUS_PLUS
    | MINUS_MINUS
    | MINUS
    | KEYWORD_NOT
    | TILDE
    | AMPERSAND [RAW_KEYWORD | MUT_KEYWORD]
    | ASTERISK
private PostfixOp ::=
      PLUS_PLUS
    | MINUS_MINUS
    | EXCLAMATION_POINT

/*************************************
 *             LITERALS              *
 *************************************/

Literal ::=
      STRING_LITERAL
    | BYTE_CHAR_LITERAL
    | CHAR_LITERAL
    | NumericLiteral
    | BooleanLiteral
    {extends=Expression}

NumericLiteral ::= (BINARY_LITERAL | OCTAL_LITERAL | HEX_LITERAL | DECIMAL_LITERAL) NumericSuffix?
    {extends=Expression}

NumericSuffix ::= 'uz' | 'f32' | 'f64' | 'u8' | 'u16' | 'u32' | 'u64' | 'i8' | 'i16' | 'i32' | 'i64'

BooleanLiteral ::= TRUE_KEYWORD | FALSE_KEYWORD {extends=Expression}

/*************************************
 *             HELPERS               *
 *************************************/

private NL ::= NEWLINE*
private NLSEMI ::= (NEWLINE | SEMICOLON)*
private meta commaList ::= <<p>> (COMMA <<p>>)* COMMA?
private meta pipeList ::= <<p>> (NL PIPE NL <<p>>)*
private meta commaOrEolList ::= <<p>> (MemberSeparator <<p>>)* MemberSeparator?
private meta separatedList ::= <<p>> (MemberSeparator? <<p>>)* MemberSeparator?
